// <auto-generated />
using Applications.PersonnelTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Applications.PersonnelTracker.Migrations
{
    [DbContext(typeof(PersonnelTrackerContext))]
    partial class PersonnelTrackerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Applications.Core.Business.Data.Assignment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AssignedOn");

                    b.Property<int>("AssignedToID");

                    b.Property<DateTime?>("CompletedOn");

                    b.Property<DateTime?>("DueOn");

                    b.Property<bool?>("Escalated");

                    b.Property<int>("TaskID");

                    b.HasKey("ID");

                    b.HasIndex("AssignedToID");

                    b.HasIndex("TaskID");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("Applications.Core.Business.Data.LoginHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LoggedInDate");

                    b.Property<int>("PersonID");

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.ToTable("LogIns");
                });

            modelBuilder.Entity("Applications.Core.Business.Data.Person", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(10);

                    b.Property<string>("NetworkID")
                        .HasMaxLength(300);

                    b.HasKey("ID");

                    b.ToTable("Personnel");
                });

            modelBuilder.Entity("Applications.Core.Business.Data.Task", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("DueAfter");

                    b.Property<int>("EscalateAfter");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Applications.Core.Business.Data.Assignment", b =>
                {
                    b.HasOne("Applications.Core.Business.Data.Person", "AssignedTo")
                        .WithMany("Assignments")
                        .HasForeignKey("AssignedToID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Applications.Core.Business.Data.Task", "Task")
                        .WithMany("Assignments")
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Applications.Core.Business.Data.LoginHistory", b =>
                {
                    b.HasOne("Applications.Core.Business.Data.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
